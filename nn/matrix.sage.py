

# This file was *autogenerated* from the file nn/matrix.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1)
import os, sys

class VerifiableMatMul:
    def __init__(self, A, b = None):
        if b is not None and A.base_ring() != b.base_ring():
            raise ValueError("A and b must have the same base ring")

        self.A = A
        self.size_in, self.size_out = A.ncols(), A.nrows()
        self.b = b if b is not None else vector(A.base_ring(), [_sage_const_0 ] * self.size_out)
        self.protocols = [VerifiableDotProduct(A[i]) for i in range(self.size_out)]


    """
    Does A * x + b
    """
    def __call__(self, x, **kwargs):
        return self.A * x + self.b


if __name__ == "__main__":
    G = ZZ
    vmm = VerifiableMatMul(random_matrix(G, _sage_const_5 , _sage_const_3 ), random_matrix(G, _sage_const_5 , _sage_const_1 ))

    v = random_matrix(G, _sage_const_3 , _sage_const_1 )
    x = vmm(v)
    print(x)


